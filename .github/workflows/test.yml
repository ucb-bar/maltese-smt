name: Continuous Integration

on:
  pull_request:
  push:


jobs:
  test:
    name: sbt test
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        scala: [2.12.13, 2.13.5]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Solvers
        id: cache
        uses: actions/cache@v2
        with:
          path: ext/bin
          key: ${{ runner.os }}-build-${{ hashFiles('ext/*.sh') }}-0

      - name: yices
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ext
        run: ./yices.sh

      - name: cvc4
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ext
        run: ./cvc4.sh

      - name: btor
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ext
        run: ./btor.sh

      - name: z3
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ext
        run: ./z3.sh

      - name: Move Binaries to Common Dir
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
         mkdir -p ext/bin
         cp ext/bin-yices/* ext/bin/
         cp ext/lib-yices/* ext/bin/
         cp ext/bin-cvc4/*  ext/bin/
         cp ext/bin-btor/*  ext/bin/
         cp ext/bin-z3/*    ext/bin/
         ls ext/bin/

      - name: Make Binaries Executable
        run: chmod +x $GITHUB_WORKSPACE/ext/bin/*

      - name: Add Binaries To Path
        run: |
         ls $GITHUB_WORKSPACE/ext/bin/
         echo "$GITHUB_WORKSPACE/ext/bin/" >> $GITHUB_PATH
         echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/ext/bin/" >> $GITHUB_ENV

      - name: Print Solver Versions and Paths
        run: |
         echo "Yices"
         yices-smt2 --version
         which yices-smt2
         echo ""
         echo "CVC4"
         cvc4 --version
         which cvc4
         echo ""
         echo "Btormc"
         btormc --version --copyright
         which btormc
         echo ""
         echo "Z3"
         z3 --version
         which z3

      - name: Setup Scala
        uses: olafurpg/setup-scala@v10
        with:
          java-version: openjdk@1.11
      - name: Cache Scala
        uses: coursier/cache-action@v5
      - name: Test
        run: sbt ++${{ matrix.scala }} test

  doc:
    name: Documentation and Formatting
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Scala
        uses: olafurpg/setup-scala@v10
      - name: Cache
        uses: coursier/cache-action@v5
      - name: Documentation
        id: doc
        run: sbt doc
      - name: Check Formatting
        run: sbt scalafmtCheckAll

  mill:
    name: Mill Sanity Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scala: [2.13.5, 2.12.13]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache
        uses: coursier/cache-action@v5
      - name: Setup Mill
        uses: jodersky/setup-mill@v0.2.3
        with:
          mill-version: 0.9.9
      - name: Mill sanity check
        run: mill _[${{ matrix.scala }}].compile

  # Sentinel job to simplify how we specify which checks need to pass in branch
  # protection and in Mergify
  #
  # When adding new jobs, please add them to `needs` below
  all_tests_passed:
    name: "all tests passed"
    needs: [test, doc, mill]
    runs-on: ubuntu-latest
    steps:
      - run: echo Success!

  # sbt ci-release publishes all cross versions so this job needs to be
  # separate from a Scala versions build matrix to avoid duplicate publishing
  publish:
    needs: [all_tests_passed]
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Scala
        uses: olafurpg/setup-scala@v10
        with:
          java-version: adopt@1.8
      - name: Cache Scala
        uses: coursier/cache-action@v5
      - name: Publish
        run: sbt ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
